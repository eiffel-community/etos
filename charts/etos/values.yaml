# Default values for etos.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  development: true

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "etos-sa"

environment-provider:
  service:
    port: 80
    name: "etos-environment-provider"

api:
  service:
    port: 80
    name: "etos-api"

# Suite runner configuration. Suite runner is not a subchart to this repository
# but tried to make it look like it is.
suiteRunner:
  image:
    repository: "registry.nordix.org/eiffel/etos-suite-runner"
    tag: "2.3.1"
  # Filebeat is for sending logs to an elastic cluster. It is used to debug
  # messages and to follow a test suite throughout an ETOS execution.
  filebeat:
    enabled: false
    image: "docker.elastic.co/beats/filebeat:7.10.1"
    config:
      filebeat.yml: |-
        filebeat.inputs:
        - type: log
          paths:
            /usr/share/filebeat/logs/*
        processors:
          - add_host_metadata:
        output.logstash:
          hosts: ["logstash-logstash.elasticsearch.svc.cluster.local:5044"]

# The configuration of the test runner python pckage.
# The version of the test runner is also controlled by the `global.development` flag,
# if the `global.development` flag is set then the test runner will install from git
# and use the `main` branch from git.
testRunner:
  version: "2.4.0"

# Must be set in order for the ETOS system to communicate with eachother.
# This can be different from the ingresses, but these hosts must be reachable
# by all ETOS components.
hosts:
  environmentProvider:
  API:

# The publishing and subscription routing key tag to use.
routingKey:
  tag: "etos"

# Eiffel GraphQL API host.
graphql: {}
  # host:

# Extra configuration items for ETOS.
# Look at templates/configmap.yaml file for examples.
configMap: "etos"
config:
  ENVIRONMENT_PROVIDER_EVENT_DATA_TIMEOUT: 60
  ENVIRONMENT_PROVIDER_TEST_SUITE_TIMEOUT: 10
  ESR_WAIT_FOR_ENVIRONMENT_TIMEOUT: 3610

# Redis is the main database currently supported by ETOS and must be set
# for ETOS to work as expceted.
database: {}
  # host:
  # port:
  # password:

# RabbitMQ is used to send and receive Eiffel events.
rabbitmq: {}
  # host:
  # exchange:
  # port:
  # vhost:
  # ssl:
  # username:
  # password:

featureFlags: {}

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This ingress can be used to create a global "etos" ingress in which
# both the environment provider and ETOS API run.
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
